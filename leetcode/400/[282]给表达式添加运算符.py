from typing import List


# 给定一个仅包含数字 0-9 的字符串和一个目标值，在数字之间添加二元运算符（不是一元）+、- 或 * ，返回所有能够得到目标值的表达式。
#
#  示例 1:
#
#  输入: num = "123", target = 6
# 输出: ["1+2+3", "1*2*3"]
#
#
#  示例 2:
#
#  输入: num = "232", target = 8
# 输出: ["2*3+2", "2+3*2"]
#
#  示例 3:
#
#  输入: num = "105", target = 5
# 输出: ["1*0+5","10-5"]
#
#  示例 4:
#
#  输入: num = "00", target = 0
# 输出: ["0+0", "0-0", "0*0"]
#
#
#  示例 5:
#
#  输入: num = "3456237490", target = 9191
# 输出: []
#
#  Related Topics 分治算法
#  👍 124 👎 0


# leetcode submit region begin(Prohibit modification and deletion)


class Solution:
    res = []

    def addOperators(self, num: str, target: int) -> List[str]:
        def cal(start: int, pre: int, exp: str, target: int):
            if start == len(num) and target == 0:
                res.append(exp)
            else:
                for i in range(start + 1, len(num) + 1):
                    if i ^ (start + 1) and num[start] == '0':
                        return
                    cur = num[start:i]
                    if exp:
                        cal(i, int(cur), exp + '+' + cur, target - int(cur))
                        cal(i, -int(cur), exp + '-' + cur, target + int(cur))
                        cal(i, int(cur) * pre, exp + '*' + cur, target - int(cur) * pre + pre)
                    else:
                        cal(i, int(cur), cur, target - int(cur))

        res = []
        cal(0, 0, '', target)
        return res


# print(Solution().addOperators(num = "123", target = 6))
# print(Solution().addOperators(num = "232", target = 8))
# print(Solution().addOperators(num = "105", target = 5))
# print(Solution().addOperators(num = "00", target = 0))
# print(Solution().addOperators(num = "3456237490", target = 9191))
a = ["1+2+3+4+5+6+7+8+9", "1+2+3+4+5-6*7+8*9", "1+2+3+4-5*6+7*8+9", "1+2+3+4-5*6-7+8*9", "1+2+3+4*5*6-7-8+9",
     "1+2+3-4*5+6*7+8+9", "1+2+3-4*5-6+7*8+9", "1+2+3-4*5-6-7+8*9", "1+2+3*4+5+6*7-8-9", "1+2+3*4*5+6+7-8+9",
     "1+2+3*4*5+6-7*8*9", "1+2+3-45+67+8+9", "1+2+3*45-6-78-9", "1+2-3+4*5+6*7-8-9", "1+2-3-4+5*6*7-8-9",
     "1+2-3-4-5*6+7+8*9", "1+2-3*4+5*6+7+8+9", "1+2-3*4-5+6*7+8+9", "1+2-3*4-5-6+7*8+9", "1+2-3*4-5-6-7+8*9",
     "1+2-3+45+6-7-8+9", "1+2-3+45-6+7+8-9", "1+2-3-45-6+7+89", "1+2*3+4*5-6+7+8+9", "1+2*3-4-5-6*7+89",
     "1+2-34+5+6+7*8+9", "1+2-34+5+6-7+8*9", "1+2-34+5-6*7*8*9", "1+2-34-5-6+78+9", "1+2*34-5*6+7+8-9",
     "1-2+3+4-5*6+78-9", "1-2+3-4*5-6+78-9", "1-2+3*4*5-6+7+8+9", "1-2+3+45+6-7+8-9", "1-2+3+45-6*7*8-9",
     "1-2+3-45+6-7+89", "1-2-3+4-5+67-8-9", "1-2-3*4+5+6+7*8-9", "1-2-3*4-5-6+78-9", "1-2-3+45-6-7+8+9",
     "1-2*3+4+5+6*7+8-9", "1-2*3+4+5-6+7*8-9", "1-2*3+4-5*6*7*8-9", "1-2*3+4*5+6+7+8+9", "1-2*3+4*5-6*7+8*9",
     "1-2*3+4+56+7-8-9", "1-2*3-4+5*6+7+8+9", "1-2*3-4-5+6*7+8+9", "1-2*3-4-5-6+7*8+9", "1-2*3-4-5-6-7+8*9",
     "1-2*3*4*5+6*7-8-9", "1-2*3+45-67+8*9", "1-2-34+5+6+78-9", "1-2-34-5+6+7+8*9", "1-2-34+56+7+8+9",
     "1-2*34+5*6-7+89", "1*2+3+4+5*6+7+8-9", "1*2+3+4-5+6*7+8-9", "1*2+3+4-5-6+7*8-9", "1*2+3-4*5*6*7+8-9",
     "1*2+3-4*56*7-8*9", "1*2+3*4*5*6+7-8-9", "1*2+3*4-56+78+9", "1*2+3+45+67-8*9", "1*2+3-45+6+7+8*9",
     "1*2-3+4-5-6*7+89", "1*2-3-4*5+67+8-9", "1*2-3-4+56-7-8+9", "1*2-3*4+5+67-8-9", "1*2-3*45*6-7*8+9",
     "1*2*3+4+5+6+7+8+9", "1*2*3+4+5-6*7+8*9", "1*2*3+4-5*6+7*8+9", "1*2*3+4-5*6-7+8*9", "1*2*3+4*5*6-7-8+9",
     "1*2*3-4*5+6*7+8+9", "1*2*3-4*5-6+7*8+9", "1*2*3-4*5-6-7+8*9", "1*2*3*4+5+6*7-8-9", "1*2*3*4*5+6+7-8+9",
     "1*2*3*4*5+6-7*8*9", "1*2*3-45+67+8+9", "1*2*3*45-6-78-9", "1*2+34+5-6-7+8+9", "1*2+34-5+6+7-8+9",
     "1*2+34-5+6-7*8*9", "1*2+34+56-7*8+9", "1*2+34-56+7*8+9", "1*2+34-56-7+8*9", "1*2-34+5*6+7*8-9",
     "1*2-34-5+6*7*8-9", "1*2*34+5*6*7-89", "1*2*34-5+6-7-8-9", "1*2*34+56-7-8*9", "1+23+4+5+6+7+8-9",
     "1+23+4-5*6+7*8-9", "1+23+4-5-67+89", "1+23+4*5*6-7-8-9", "1+23-4-5+6+7+8+9", "1+23-4-5-6*7+8*9",
     "1+23-4*5+6*7+8-9", "1+23-4*5-6+7*8-9", "1+23*4+5-6-7*8+9", "1+23*4-5-6*7+8-9", "1+23*4-56+7-8+9",
     "1+23*4-56-7*8*9", "1+23-45+67+8-9", "1-23+4-5+67-8+9", "1-23+4*5-6*7+89", "1-23-4+5+67+8-9", "1-23-4-5-6-7+89",
     "1-23*4+5+6*7+89", "1-23+45-67+89", "1*23+4*5-6+7-8+9", "1*23+4*5-6-7*8*9", "1*23-4-56-7+89", "1*23*4*5+6-78+9",
     "12+3+4-56-7+89", "12+3-4*5+67-8-9", "12+3*4+5+6-7+8+9", "12+3*4+5-6*7*8+9", "12+3*4*5-67+8*9", "12+3-45+6+78-9",
     "12+3*45-6-7-89", "12-3+4*5+6-7+8+9", "12-3+4*5-6*7*8+9", "12-3+4+56-7-8-9", "12-3-4+5*6-7+8+9", "12-3-4-56+7+89",
     "12-3*4-5+67-8-9", "12-3-45-6+78+9", "12*3+4+5+6-7-8+9", "12*3+4+5-6+7+8-9", "12*3+4-5*6*7+8-9",
     "12*3+4*5*6*7-8*9", "12*3-4-5-6+7+8+9", "12*3-4-56+78-9", "12*3*4+5+67-8*9", "12*3*4-5-67+8*9", "12*3*4*5-6+7-8-9",
     "12+34-5-6-7+8+9", "12-34+5*6*7-8+9"]
b = ["1*2*3*4*5-6-78+9", "1*2*3*4+5+6-7+8+9", "1*2*3+4+5+6+7+8+9", "1*2*3+4+5-6*7+8*9", "1*2*3+4-5*6+7*8+9",
     "1*2*3+4-5*6-7+8*9", "1*2*3-4*5+6*7+8+9", "1*2*3-4*5-6+7*8+9", "1*2*3-4*5-6-7+8*9", "1*2*3-45+67+8+9",
     "1*2*34+56-7-8*9", "1*2*34-5+6-7-8-9", "1*2+3*4-56+78+9", "1*2+3+4+5*6+7+8-9", "1*2+3+4-5+6*7+8-9",
     "1*2+3+4-5-6+7*8-9", "1*2+3+45+67-8*9", "1*2+3-45+6+7+8*9", "1*2+34+5-6-7+8+9", "1*2+34+56-7*8+9",
     "1*2+34-5+6+7-8+9", "1*2+34-56+7*8+9", "1*2+34-56-7+8*9", "1*2-3*4+5+67-8-9", "1*2-3+4-5-6*7+89",
     "1*2-3-4*5+67+8-9", "1*2-3-4+56-7-8+9", "1*2-34+5*6+7*8-9", "1*23+4*5-6+7-8+9", "1*23-4-56-7+89",
     "1+2*3*4*5+6+7-89", "1+2*3*4+5*6+7-8-9", "1+2*3*4-5+6*7-8-9", "1+2*3+4*5*6+7-89", "1+2*3+4*5-6+7+8+9",
     "1+2*3-4-5-6*7+89", "1+2*34-5*6+7+8-9", "1+2+3*4*5+6-7-8-9", "1+2+3*4+5+6*7-8-9", "1+2+3*45-6-78-9",
     "1+2+3+4+5+6+7+8+9", "1+2+3+4+5-6*7+8*9", "1+2+3+4-5*6+7*8+9", "1+2+3+4-5*6-7+8*9", "1+2+3-4*5+6*7+8+9",
     "1+2+3-4*5-6+7*8+9", "1+2+3-4*5-6-7+8*9", "1+2+3-45+67+8+9", "1+2-3*4*5+6+7+89", "1+2-3*4+5*6+7+8+9",
     "1+2-3*4-5+6*7+8+9", "1+2-3*4-5-6+7*8+9", "1+2-3*4-5-6-7+8*9", "1+2-3+4*5+6*7-8-9", "1+2-3+45+6-7-8+9",
     "1+2-3+45-6+7+8-9", "1+2-3-4-5*6+7+8*9", "1+2-3-45-6+7+89", "1+2-34+5+6+7*8+9", "1+2-34+5+6-7+8*9",
     "1+2-34-5-6+78+9", "1+23*4+5-6-7*8+9", "1+23*4-5-6*7+8-9", "1+23*4-56+7-8+9", "1+23+4+5+6+7+8-9",
     "1+23+4-5*6+7*8-9", "1+23+4-5-67+89", "1+23-4*5+6*7+8-9", "1+23-4*5-6+7*8-9", "1+23-4-5+6+7+8+9",
     "1+23-4-5-6*7+8*9", "1+23-45+67+8-9", "1-2*3*4+5-6+78-9", "1-2*3*4-5-6+7+8*9", "1-2*3+4*5+6+7+8+9",
     "1-2*3+4*5-6*7+8*9", "1-2*3+4+5+6*7+8-9", "1-2*3+4+5-6+7*8-9", "1-2*3+4+56+7-8-9", "1-2*3+45-67+8*9",
     "1-2*3-4+5*6+7+8+9", "1-2*3-4-5+6*7+8+9", "1-2*3-4-5-6+7*8+9", "1-2*3-4-5-6-7+8*9", "1-2*34+5*6-7+89",
     "1-2+3*4*5-6-7+8-9", "1-2+3+4-5*6+78-9", "1-2+3+45+6-7+8-9", "1-2+3-4*5-6+78-9", "1-2+3-45+6-7+89",
     "1-2-3*4+5+6+7*8-9", "1-2-3*4-5-6+78-9", "1-2-3+4-5+67-8-9", "1-2-3+45-6-7+8+9", "1-2-34+5+6+78-9",
     "1-2-34+56+7+8+9", "1-2-34-5+6+7+8*9", "1-23*4+5+6*7+89", "1-23+4*5-6*7+89", "1-23+4-5+67-8+9", "1-23+45-67+89",
     "1-23-4+5+67+8-9", "1-23-4-5-6-7+89", "12*3*4-5*6-78+9", "12*3+4+5+6-7-8+9", "12*3+4+5-6+7+8-9",
     "12*3-4-5-6+7+8+9", "12*3-4-56+78-9", "12+3*4+5+6-7+8+9", "12+3*45-6-7-89", "12+3+4-56-7+89", "12+3-4*5+67-8-9",
     "12+3-45+6+78-9", "12+34-5-6-7+8+9", "12-3*4*5+6+78+9", "12-3*4-5+67-8-9", "12-3+4*5+6-7+8+9", "12-3+4+56-7-8-9",
     "12-3-4+5*6-7+8+9", "12-3-4-56+7+89", "12-3-45-6+78+9"]

a = Solution().addOperators("123456789"
                            , 45)
print(set(a) - set(b))
print(set(b) - set(a))
